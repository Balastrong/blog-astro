---
import { Icon } from 'astro-icon/components';
import { speakingSessions } from '~/data';
import Layout from '~/layouts/PageLayout.astro';
import type { MetaSEO } from '~/types';
import speakingBanner from 'src/assets/images/banner-speaking.png';

const pageDescription = 'You may have seen me talking about things I like on some occasions';

const meta: MetaSEO = {
  title: 'Public Speaking',
  description: pageDescription,
  image: speakingBanner,
  author: 'Leonardo Montini',
};

const images = Object.entries(import.meta.glob('/src/assets/images/speaking/*', { eager: true })).reduce(
  (acc, [path, image]) => {
    const key = path.split('/').pop() ?? '';
    const imageSrc = (image as { default: { src: string } })?.default?.src;
    if (key && imageSrc) {
      acc[key] = imageSrc;
    }
    return acc;
  },
  {} as Record<string, string>
);

const sessionsByYear = speakingSessions
  .toSorted((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  .reduce((acc, session) => {
    const year = new Date(session.date).getFullYear();
    acc[year] = acc[year] || [];
    acc[year].push(session);
    return acc;
  }, {} as Record<string, typeof speakingSessions>);

const years = Object.keys(sessionsByYear).sort((a, b) => parseInt(b) - parseInt(a));

// Helper function to format date
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

// Helper function to get session icon based on type
const getSessionTypeIcon = (type: 'session' | 'interview') => {
  return type === 'session' ? 'tabler:presentation' : 'tabler:messages';
};

// Helper function to get mode icon
const getModeIcon = (mode: 'in-person' | 'remote' | 'hybrid') => {
  switch (mode) {
    case 'in-person':
      return 'tabler:users';
    case 'remote':
      return 'tabler:device-laptop';
    case 'hybrid':
      return 'tabler:device-laptop-off';
  }
};

// Helper to get color based on session type
const getSessionColor = (type: 'session' | 'interview') => {
  return type === 'session'
    ? 'bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800'
    : 'bg-purple-50 dark:bg-purple-950 border-purple-200 dark:border-purple-800';
};

// Helper to get animation class based on session type
const getAnimationClass = (type: 'session' | 'interview') => {
  const baseAnimation = 'transition-all ease-in-out duration-500 md:hover:scale-105 hover:shadow-lg';
  return type === 'session'
    ? `${baseAnimation} hover:shadow-blue-200/50 dark:hover:shadow-blue-800/30 group`
    : `${baseAnimation} hover:shadow-purple-200/50 dark:hover:shadow-purple-800/30 group`;
};
---

<Layout {meta}>
  <section class="relative">
    <div class="relative max-w-6xl mx-auto px-4 sm:px-6 mb-12 flex flex-col gap-4">
      <div class="pt-6 sm:pt-4 lg:pt-8">
        <div class="mb-6 md:mx-auto text-center max-w-3xl">
          <p class="text-base text-primary dark:text-blue-200 font-semibold tracking-wide uppercase">Archive</p>
          <h1 class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-3 font-heading">
            Public Speaking
          </h1>
          <p class="max-w-3xl mx-auto sm:text-center text-lg text-muted dark:text-slate-400">
            {pageDescription}
          </p>
        </div>
      </div>

      {
        years.map((year) => (
          <div class="mb-8 flex flex-col">
            {/* Year header */}
            <h2 class="text-4xl font-bold mb-8 text-center">{year}</h2>

            <div class="relative min-h-[350px]">
              {/* Timeline center line */}
              <div class="absolute h-full w-0.5 bg-gray-200 dark:bg-gray-700 left-1/2 -translate-x-1/2 md:block hidden" />
              {/* Mobile timeline line (left-aligned) */}
              <div class="absolute h-full w-0.5 bg-gray-200 dark:bg-gray-700 left-0 md:hidden block" />

              {sessionsByYear[year].map((session, index) => (
                <div class={`relative md:w-1/2 flex md:odd:mt-0 md:even:mt-0 md:even:left-1/2 mb-4 md:mb-0`}>
                  {/* Timeline dot */}
                  <div
                    class={`absolute w-4 h-4 rounded-full bg-primary dark:bg-blue-400 top-1/2 -translate-y-1/2 z-10 
                    ${index % 2 === 0 ? 'md:right-0 md:translate-x-1/2' : 'md:left-0 md:-translate-x-1/2'} 
                    -left-1.5 md:left-auto`}
                  />

                  {/* Timeline card */}
                  <div
                    class={`relative ${
                      index % 2 === 0 ? 'md:ml-auto md:pr-8 md:text-right' : 'md:mr-auto md:pl-8 md:text-left'
                    } ml-6 md:ml-0 pl-2 md:pl-0`}
                  >
                    {/* Connection lines */}
                    {index % 2 === 0 ? (
                      <div class="absolute top-1/2 right-0 w-8 h-0.5 bg-primary dark:bg-blue-400 -translate-y-1/2 hidden md:block" />
                    ) : (
                      <div class="absolute top-1/2 left-0 w-8 h-0.5 bg-primary dark:bg-blue-400 -translate-y-1/2 hidden md:block" />
                    )}

                    <div
                      class={`p-4 rounded-lg border shadow-sm ${getSessionColor(session.type)} ${getAnimationClass(
                        session.type
                      )} relative overflow-hidden`}
                    >
                      {/* Background Image (if available) */}
                      {session.image && (
                        <div class="absolute inset-0 z-0 transition-opacity duration-300">
                          <img
                            src={images[session.image]}
                            class="w-full h-full object-cover opacity-20 group-hover:opacity-35 transition-opacity duration-300"
                          />
                          <div class="absolute inset-0 bg-gradient-to-r from-white/50 to-white/50 dark:from-black/50 dark:to-black/50 group-hover:from-white/30 group-hover:to-white/30 dark:group-hover:from-black/30 dark:group-hover:to-black/30 transition-all duration-500" />
                        </div>
                      )}

                      {/* Content with higher z-index */}
                      <div class="relative">
                        {/* Date */}
                        <div
                          class={`font-medium text-gray-500 dark:text-gray-400 mb-1 flex ${
                            index % 2 === 0 ? 'md:flex-row-reverse' : 'flex-row'
                          } items-center gap-1`}
                        >
                          {formatDate(session.date)} <span class="text-lg">{session.language}</span>
                        </div>

                        {/* Title */}
                        <h3
                          class={`font-bold text-lg md:text-xl mb-2 break-words ${
                            index % 2 === 0 ? 'md:text-right' : 'md:text-left'
                          }`}
                        >
                          <span class="break-words">{session.title}</span>
                        </h3>

                        {/* Event */}
                        <div
                          class={`text-base text-gray-700 dark:text-gray-300 mb-3 break-words ${
                            index % 2 === 0 ? 'md:text-right' : 'md:text-left'
                          }`}
                        >
                          <span class="break-words">{session.event}</span>
                        </div>

                        {/* Icons and Links */}
                        <div
                          class={`flex flex-col md:${
                            index % 2 === 0 ? 'flex-row-reverse' : 'flex-row'
                          } md:items-center justify-between gap-3 text-gray-600 dark:text-gray-400`}
                        >
                          {/* Type and Mode */}
                          <div
                            class={`flex ${index % 2 === 0 ? 'md:flex-row-reverse' : 'flex-row'} items-center gap-3`}
                          >
                            <div class="flex items-center gap-1" title={`Type: ${session.type}`}>
                              <Icon name={getSessionTypeIcon(session.type)} class="w-4 h-4" />
                              <span class="text-sm md:text-base capitalize">{session.type}</span>
                            </div>
                            <div class="flex items-center gap-1" title={`Mode: ${session.mode}`}>
                              <Icon name={getModeIcon(session.mode)} class="w-4 h-4" />
                              <span class="text-sm md:text-base capitalize">{session.mode}</span>
                            </div>
                          </div>

                          {/* Links */}
                          <div
                            class={`flex ${index % 2 === 0 ? 'md:flex-row-reverse' : 'flex-row'} items-center gap-3`}
                          >
                            {session.recording && (
                              <a
                                href={session.recording}
                                target="_blank"
                                rel="noopener"
                                class="text-primary dark:text-blue-400 hover:underline flex items-center gap-1"
                                title="Watch recording"
                              >
                                <Icon name="tabler:player-play" class="w-4 h-4" />
                                <span class="text-sm md:text-base">Recording</span>
                              </a>
                            )}
                            {session.eventUrl && (
                              <a
                                href={session.eventUrl}
                                target="_blank"
                                rel="noopener"
                                class="text-primary dark:text-blue-400 hover:underline flex items-center gap-1"
                                title="Event page"
                              >
                                <Icon name="tabler:link" class="w-4 h-4" />
                                <span class="text-sm md:text-base">Event</span>
                              </a>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))
      }
    </div>
  </section>
</Layout>
